# ---
openapi: 3.0.3 
# --------------------------------------------
# Info
info:
  title: Book Collection API
  version: v1.0.0
  description: A simple API to manage a collection of books.
  termsOfService: 'https://github.com/methods/S_BookAPIV.2'
  contact:
    email: booksAPI@example.com
  license:
    name: MIT License
    url: 'https://github.com/methods/S_BookAPIV.2/blob/main/LICENSE.md'

# --------------------------------------------
# Server
servers:
  - url: http://localhost:5000 
    description: Development server
    
# --------------------------------------------
# Tags
tags:
  - name: Books
    description: Operations related to books
    externalDocs:
      description: Find out more
      url: example.com
  - name: Reservations
    description: Operations related to book reservations
  - name: Authentication
    description: Operations related to user registration and login

# --------------------------------------------
# Components
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Enter JWT Bearer token"

  parameters: 
    BookId:
      name: book_id
      in: path
      required: true
      description: The unique identifier of the book.
      schema:
        type: string
        pattern: '^[a-f\d]{24}$'
        example: "635f3a7e3a8e3bcfc8e6a1e0"
    ReservationId:
      name: res_id
      in: path
      required: true
      description: The unique identifier of the reservation.
      schema:
        type: string
        pattern: '^[a-f\d]{24}$'
        example: "635f3a7f3a8e3bcfc8e6a1f1"
 
  schemas:
    # --- Book Schemas ---
    BookInput:
      type: object
      required:
        - title
        - synopsis
        - author
      properties:
        title:
          type: string
          example: "The Hitchhiker's Guide to the Galaxy"
        synopsis:
          type: string
          example: "Seconds before the Earth is demolished to make way for a galactic freeway..."
        author:
          type: string
          example: "Douglas Adams"

    # Schema for the HATEOAS links object generated by the server
    Links:
      type: object
      required:
        - self
        - reservations
        - reviews
      properties:
        self:
          type: string
          description: Link to the book resource itself.
          format: uri
        reservations:
          type: string
          description: Link to reservations for this book.
          format: uri
        reviews:
          type: string
          description: Link to reviews for this book.
          format: uri

    # Schema for the full Book object as returned by the server
    BookOutput:
      allOf: # Inherits all properties from BookInput
        - $ref: '#/components/schemas/BookInput'
      properties:
        id:
          type: string
          description: The unique 24-character hexadecimal identifier for the book, generated by the server (MongoDB ObjectId).
          readOnly: true
          example: "635f3a7e3a8e3bcfc8e6a1e0"
        links:
          $ref: '#/components/schemas/Links' 
          readOnly: true 

    # Schema for the full Books Database Object as returned by the server      
    BookListResponse:
      type: object
      properties:
        total_count:
          type: integer
          description: Total number of books
          example: 3
        items:
          type: array
          items:
            $ref: '#/components/schemas/BookOutput'


  # ----- AUTH schemas -------------

    # Schema for the data client POSTs to register a user
    UserRegistrationInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "newuser@example.com"
        password:
          type: string
          format: password # This format is a hint for UI tools to obscure the input
          minLength: 8 # It's good practice to suggest a minimum length
          example: "a-very-secure-password"

    # Schema for the User object as returned by the server on success
    UserOutput:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: "635f3a7e3a8e3bcfc8e6a1e0"
        email:
          type: string
          format: email
          readOnly: true
          example: "newuser@example.com"

    # Schema for the successful registration response
    RegistrationSuccess:
      type: object
      properties:
        message:
          type: string
          example: "User registered successfully"
        user:
          $ref: '#/components/schemas/UserOutput'


  # ------- Reservation schemas ----------

    # Schema for the PUT /reservations/{res_id} request body
    ReservationUserOutput:
      type: object
      properties:
        forenames:
          type: string
          example: "John"
        middlenames:
          type: string
          example: "Fitzgerald"
        surname:
          type: string
          example: "Doe"
          
    # A schema for the 'links' object in the response.
    ReservationLinks:
      type: object
      properties:
        self:
          type: string
          format: uri
          description: A link to the reservation resource itself.
        book:
          type: string
          format: uri
          description: A link to the parent book resource.
      readOnly: true
    

    # Schema for the full Reservation object returned by the API
    ReservationOutput:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the reservation. 
          pattern: '^[a-f\d]{24}$'
          example: "635f3a7f3a8e3bcfc8e6a1f1"
        state:
          type: string
          description: The current state of the reservation.
          example: "reserved"
          readOnly: true
        user_id:
          type: string
          description: The ID of the user who made the reservation.
          pattern: '^[a-f\d]{24}$'
          example: "635f3a7e3a8e3bcfc8e6a1e0"
        book_id:
          type: string
          description: The ID of the book being reserved.
          pattern: '^[a-f\d]{24}$'
          example: "635f3a7e3a8e3bcfc8e6a1e0"
        links:
          $ref: '#/components/schemas/ReservationLinks'
        reservationDate:
          type: string
          format: date-time
          description: The timestamp when the reservation was made.
          example: "2023-10-27T10:00:00Z"


    # Schema for the GET /reservations response body (a list)
    ReservationsOutput:
      type: object
      properties:
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/ReservationOutput'

  # ------ ERROR schemas ----------

    # Generic Error schema
    StandardError:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              description: The HTTP status code.
              example: 400
            name:
              type: string
              description: The HTTP status name.
              example: "Bad Request"
            message:
              type: string
              description: A detailed error message.
              example: "API key is missing."
          required:
            - code
            - name
            - message
    
    SimpleError:
      type: object
      properties:
        error:
          type: string
          description: A brief error message.
      required:
        - error

    # Schema for a simple message response (useful for errors)
    MessageError:
      type: object
      properties:
        message:
          type: string
          description: A brief error message.
      required:
        - message

  # API Error: Reusable responses for common errors  
  responses:
    BadRequest:
      description: The server could not process the request due to a client error (e.g., malformed request syntax).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
          example:
            error:
              code: 400
              name: "Bad Request"
              message: "The request syntax was invalid or the payload is missing required fields."
    Unauthorized:
      description: Authentication credentials are missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
          example:
            error:
              code: 401
              name: "Unauthorized"
              message: "Authentication credentials were not provided or are invalid."
    NotFound:
      description: The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
          example:
            error:
              code: 404
              name: "Not Found"
              message: "The requested resource could not be located."
    UnsupportedMediaType:
      description: The request payload is not in the expected format (e.g., not application/json).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
          example:
            error:
              code: 415
              name: "Unsupported Media Type"
              message: "The payload format is unsupported. Please use 'application/json'."
    ServiceUnavailable:
      description: The service is temporarily unavailable, likely due to a database connection issue or server maintenance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
          example:
            error:
              code: 503
              name: "Service Unavailable"
              message: "The server is temporarily unavailable. Please try again later."
    InternalServerError:
      description: An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
          example:
            error:
              code: 500
              name: "Internal Server Error"
              message: "An unexpected condition was encountered on the server."
# --------------------------------------------

# Paths
paths:
  /books:
# --------------------------------------------
    post:
      tags:
        - Books
      summary: Add a new book
      security:
        - ApiKeyAuth: [] 
      description: Adds a new book to the collection. The server will generate a unique ID and HATEOAS links for the new book.
      operationId: addBook
      requestBody:
        description: Book object that needs to be added to the store.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput' 
      responses:
        '201': 
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOutput' 
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '415': 
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError' 
    # --------------------------------------------
    get:
      tags:
        - Books
      summary: Returns all books in the database
      description: Retrieve all books from the database and return them in a JSON response including the total count.
      operationId: getAllBooks
      parameters:
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result set.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
            example: 20
        - name: limit
          in: query
          description: The number of items to return.
          required: false
          schema:
            type: integer
            format: int32
            default: 20
            minimum: 1
            maximum: 100
            example: 10
      responses:
        '200':
          description: A list of all books including the total count.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookListResponse'
        '400':
          description: Invalid query parameters provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleError'
              example:
                error: "Query parameters 'limit' and 'offset' cannot be negative."
        '404':
          $ref: '#/components/responses/NotFound' 
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  # --------------------------------------------
  /books/{book_id}: 
  # --------------------------------------------
    ### NOTE: Parameter defined once at the path level, applies to all methods below.
    parameters:
      - $ref: '#/components/parameters/BookId'
    get:
      tags:
        - Books 
      summary: Get a book by ID
      description: Retrieves a single book resource by its unique identifier.
      operationId: getBookById 
      responses:
        '200': 
          description: Successfully retrieved the book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOutput' 
        '400':
          description: |-
            Bad Request. The provided book_id is not a valid 24-character hexadecimal string.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleError'
              example:
                error: "Invalid book ID format"
        '404': 
          description: A book with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleError'
              example:
                error: "Book not found" 
        '500':
          $ref: '#/components/responses/InternalServerError'
     # --------------------------------------------

    put:
      tags:
        - Books
      summary: Update a book by replacement
      security:
        - ApiKeyAuth: []
      description: Updates an existing book by its unique ID. This is a full replacement operation (HTTP PUT). The request body must contain all required fields (`title`, `synopsis`, `author`) and no extra fields.
      operationId: updateBook
      requestBody:
        description: A complete Book object to replace the existing one.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book updated successfully. Returns the full updated book object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOutput'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound' 
        '415':
          description: |-
            Unsupported Media Type. The client sent a request with a Content-Type header other than `application/json`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleError'
              example:
                error: "Request must have Content-Type: application/json"
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags:
        - Books
      summary: Delete a book by ID
      security:
        - ApiKeyAuth: []
      description: Soft deletes a book by setting its state to 'deleted'. This operation is idempotent.
      operationId: deleteBookById
      responses:
        '204':
          description: Book deleted successfully.
          content: {}
        '400':
          description: Bad Request. The provided book_id is not in a valid 24-character hexadecimal format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleError'
              example:
                error: "Invalid Book ID format"
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError' 


# --------------------------------------------
  /books/{book_id}/reservations:
    parameters:
      - $ref: '#/components/parameters/BookId'
    post: 
      tags:
        - Reservations
      summary: Create a reservation for a book.
      description: Creates a reservation for the book identified by {book_id} on behalf of the authenticated user. A valid JWT Bearer token is required.
      operationId: createBookReservation
      security:
        - bearerAuth: []
      requestBody:
        description: The request body for this endpoint is ignored. An empty JSON object `{}` is recommended.
        content:
          application/json:
            schema: {}
      responses:
        '201':
          description: Reservation created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationOutput' 
        '400':
          description: |-
            Bad Request. Possible reasons include:
            - The book ID in the path is not a valid MongoDB ObjectId.
            - The request body is malformed (e.g., not valid JSON).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleError'
              examples:
                invalidId:
                  summary: Invalid Book ID
                  value:
                    error: "Invalid Book ID"
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          description: The book with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleError'
              example:
                error: "Book not found"
        '409':
          description: A reservation for this book by the authenticated user already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleError'
              example:
                error: "You have already reserved this book"
        '415':
          $ref: '#/components/responses/UnsupportedMediaType' 
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

    # ----------------------------------------
    get:
      tags:
        - Reservations
      summary: Get all reservations for a book
      description: Fetches a list of all active reservations for the book identified by {book_id}.
      operationId: get_book_reservations
      responses:
        '200': 
          description: Successfully retrieved the list of reservations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationsOutput'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ----------------------------------------
  /books/{book_id}/reservations/{res_id}:
    parameters:
      - $ref: '#/components/parameters/BookId'
      - $ref: '#/components/parameters/ReservationId'
    get:
      tags: 
        - Reservations
      summary: Retrieve a specific reservation.
      description: Fetches the reservation with {res_id} for the book with {book_id}.
      operationId: get_specific_reservation
      responses:
        '200':
          description: Successfully retrieved the specific reservation for the specific book
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReservationOutput' 
        '400':
          description: |-
            Bad Request. The provided book_id/res_id is not a valid 24-character hexadecimal string.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleError'
              example:
                error: "Invalid book/reservation ID format"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError' 

    put:
      tags: 
        - Reservations
      summary: Update a reservation
      security:
        - bearerAuth: []
      description: Updates an existing reservation by its ID. 
        This is a full replacement operation (HTTP PUT), so the request body must contain all updatable fields for the reservation.
      operationId: updateReservationById
      requestBody:
        description: A complete Reservation object with the updated details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationUpdateInput'
      responses:
        '200':
          description: Reservation updated successfully. Returns the full updated reservation object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationOutput'
        '400':
          description: Bad Request. The request body is invalid or the ID format is incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
              example:
                error:
                  code: 400
                  name: "Bad Request"
                  message: "Invalid ID format or missing required fields in the request body."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Forbidden. The authenticated user does not have permission to update this reservation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
              example:
                error:
                  code: 403
                  name: "Forbidden"
                  message: "You are not authorized to perform this action."
        '404':
          description: The book or reservation to be updated was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
              example:
                error:
                  code: 404
                  name: "Not Found"
                  message: "The reservation you are trying to update does not exist."
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Reservations
      summary: Delete a reservation by {res_id}.
      security: 
        - bearerAuth: []
      description: Hard deletes a specific book reservation by reservation ID {res_id}. It is a HARD delete.
      operationId: deleteReservationById
      responses:
        '204':
          description: Reservation deleted successfully.
          content: {}
        '400':
          description: Bad Request. The provided book_id or res_id is not in a valid 24-character hexadecimal format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleError'
              example:
                error: "Invalid Book/Reservation ID format"
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          description: A reservation with the specified ID was not found or was already deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFound'
              example:
                error: "Reservation not found"
        '500':
          $ref: '#/components/responses/InternalServerError'



# --------------------------------------------
  /auth/register:
# --------------------------------------------
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account. The server will hash the password and store the user details, returning a unique ID for the new user.
      operationId: registerUser
      requestBody:
        description: User's email and password for registration.
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/UserRegistrationInput'
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationSuccess'
        '400':
          description: Bad Request. The request body is missing, not valid JSON, or is missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequest'
        '409':
          description: Conflict. The provided email is already registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageError' 
              example:
                message: "Email is already registered"