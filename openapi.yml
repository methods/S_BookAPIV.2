# ---
openapi: 3.0.3 
# --------------------------------------------
# Info
info:
  title: Book Collection API
  version: v1.0.0
  description: A simple API to manage a collection of books.
  termsOfService: 'https://github.com/methods/S_BookAPIV.2'
  contact:
    email: booksAPI@example.com
  license:
    name: MIT License
    url: 'https://github.com/methods/S_BookAPIV.2/blob/main/LICENSE.md'

# --------------------------------------------
# Server
servers:
  - url: http://localhost:5000 
    description: Development server
    
# --------------------------------------------
# Tags
tags:
  - name: Books
    description: Operations related to books
    externalDocs:
      description: Find out more
      url: example.com

# --------------------------------------------
# Components
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  
  schemas:
    # Schema for the data client POSTs to create a book
    BookInput:
      type: object
      properties:
        title:
          type: string
          description: The title of the book.
          example: "The Hitchhiker's Guide to the Galaxy"
        synopsis:
          type: string
          description: A brief summary of the book.
          example: "Seconds before the Earth is demolished to make way for a galactic freeway..."
        author:
          type: string
          description: The author of the book.
          example: "Douglas Adams"
      required: # These fields are mandatory in the request body
        - title
        - synopsis
        - author

    # Schema for the HATEOAS links object generated by the server
    Links:
      type: object
      properties:
        self:
          type: string
          # format: uri
          description: Link to the book resource itself.
          example: "http://example.com/books/123e4567-e89b-12d3-a456-426614174000"
        reservations:
          type: string
          description: Link to reservations for this book.
          example: "http://example.com/books/123e4567-e89b-12d3-a456-426614174000/reservations"
        reviews:
          type: string
          description: Link to reviews for this book.
          example: "http://example.com/books/123e4567-e89b-12d3-a456-426614174000/reviews"
      required:
        - self
        - reservations
        - reviews

    # Schema for the full Book object as returned by the server
    BookOutput:
      allOf: # Inherits all properties from BookInput
        - $ref: '#/components/schemas/BookInput'
      type: object
      properties:
        id:
          type: string
          format: uuid 
          description: The unique identifier for the book (server-generated).
          readOnly: true 
          example: "123e4567-e89b-12d3-a456-426614174000"
        links:
          $ref: '#/components/schemas/Links' 
          readOnly: true 

    # Schema for the full Books Database Object as returned by the server      
    BookListResponse:
      type: object
      properties:
        total_count:
          type: integer
          description: Total number of books
          example: 3
        items:
          type: array
          items:
            $ref: '#/components/schemas/BookOutput'

    # Generic Error schema
    StandardError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              description: The HTTP status code.
              example: 400
            name:
              type: string
              description: The HTTP status name.
              example: "Bad Request"
            message:
              type: string
              description: A detailed error message.
              example: "API key is missing."
          required:
            - code
            - name
            - message
      required:
        - error
    
  # API Error: Reusable responses for common errors  
  responses:
    BadRequest:
      description: The server could not process the request due to a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
    Unauthorized:
      description: API key is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
    NotFound:
      description: The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
    UnsupportedMediaType:
      description: The request payload is not in the expected format (e.g., not JSON).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
    ServiceUnavailable:
      description: The service is temporarily unavailable, likely due to a database connection issue or server maintenance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
    InternalServerError:
      description: An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
# --------------------------------------------
# Paths
paths:
# --------------------------------------------
  /books:
# --------------------------------------------
    post:
      tags:
        - Books
      summary: Add a new book
      security:
        - ApiKeyAuth: [] 
      description: Adds a new book to the collection. The server will generate a unique ID and HATEOAS links for the new book.
      operationId: addBook
      requestBody:
        description: Book object that needs to be added to the store.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput' 
      responses:
        '201': 
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOutput' 
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '415': 
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError' 
    # --------------------------------------------
    get:
      tags:
        - Books
      summary: Returns all books in the database
      description: Retrieve all books from the database and return them in a JSON response including the total count.
      operationId: getAllBooks
      responses:
        '200':
          description: A list of all books including the total count.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookListResponse'
                properties:
                  total_count:
                    type: integer
                    description: The number of books returned.
                    example: 3
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/BookOutput'
        '404':
          $ref: '#/components/responses/NotFound' 
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  # --------------------------------------------
  /books/{book_id}: 
  # --------------------------------------------
    get:
      tags:
        - Books 
      summary: Get a book by ID
      description: Retrieves a single book resource by its unique identifier.
      operationId: getBookById 
      parameters: 
        - name: book_id 
          in: path 
          required: true 
          description: The unique identifier of the book to retrieve.
          schema:
            type: string
            format: uuid 
            example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
      responses:
        '200': 
          description: Successfully retrieved the book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOutput' 
        '404': 
          $ref: '#/components/responses/NotFound' 
        '500': 
          $ref: '#/components/responses/InternalServerError' 
     # --------------------------------------------

    put:
      tags:
        - Books
      summary: Update a book
      security:
        - ApiKeyAuth: []
      description: Updates an existing book by its unique ID. The entire book object must be provided in the request body.
      operationId: updateBook
      parameters:
        - name: book_id
          in: path
          required: true
          description: The unique identifier of the book to update.
          schema:
            type: string
            format: uuid
            example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
      requestBody:
        description: Book object that needs to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book updated successfully. Returns the full updated book object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOutput'
        '400':
          $ref: '#/components/responses/BadRequest' 
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound' 
        '415':
          $ref: '#/components/responses/UnsupportedMediaType' 
        '500':
          $ref: '#/components/responses/InternalServerError' 

    # --------------------------------------------
    
    delete:
      tags:
        - Books
      summary: Delete a book by ID
      security:
        - ApiKeyAuth: []
      description: Soft deletes a book by setting its state to 'deleted'.
      operationId: deleteBookById
      parameters:
        - name: book_id
          in: path
          required: true
          description: The unique identifier of the book to delete.
          schema:
            type: string
            format: uuid
            example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
      responses:
        '204':
          description: Book deleted successfully.
          content: {}
        '401':
          $ref: '#/components/responses/Unauthorized' 
        '404':
          $ref: '#/components/responses/NotFound' 
        '500':
          $ref: '#/components/responses/InternalServerError' 
